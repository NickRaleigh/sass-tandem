@import 'include-media';
@import 'perch-array';
@import 'perch-parse-helper';

@mixin perch($childrenObj:null, $settingsObj:[]) {
  // create grid
  display: grid;

  // name template-areas of children
  @if ($childrenObj != null) {
    @each $name, $selector in $childrenObj {
      #{$selector} {
        grid-area: $name;
      }
    }
  }

  @if(type-of($settingsObj) == 'list') {
    @include perch-array($childrenObj, $settingsObj);
  }

  @else {
    // loop over entire object
    @each $breakPoint, $settings in $settingsObj {
      $gridTemplate: [];
      $gridModifiers: [];

      //loop over each setting to remove grid-template-area from special grid modifiers.
      @each $setting in $settings {
        $first-char: str-slice(quote($setting), 1,1);
        @if ($first-char != _) {
          $gridTemplate: join($gridTemplate, $setting, comma);
        }
        @else {
          $gridModifiers: join($gridModifiers, $setting, comma);
        }
      }

      // convert gridTemplate to set of strings for css
      $gridTemplateCss: null;
      @each $row in $gridTemplate {
        @if ($gridTemplateCss == null) {
          $gridTemplateCss: $row;
        }
        @else {
          $gridTemplateCss: join($gridTemplateCss,$row, space);
        }
      }

      //check breakpoint & assign css
      @if ($breakPoint == 'default') {
        grid-template-areas: $gridTemplateCss;
        // TODO: Add grid gap.
      } @else {
        @include media('screen', '#{$breakPoint}') {
          grid-template-areas: $gridTemplateCss;
        }
      }

      //process grid modifiers
      @include parseModifiers($childrenObj, $breakPoint, $gridModifiers);

      // parse perch for internet explorer
      $preventDefaultDuplicates: 0;
      $preventBpDuplicates: 0;
      @include parseIE($childrenObj, $gridTemplate, $breakPoint, $preventDefaultDuplicates, $preventBpDuplicates);

    }
  }
}
